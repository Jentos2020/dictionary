// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package gen

import (
	"fmt"

	"github.com/gofiber/fiber/v2"
	"github.com/oapi-codegen/runtime"
)

// Word defines model for Word.
type Word struct {
	Data *string `json:"data,omitempty"`

	// Dictionary Dictionary table name (e.g., "russian")
	Dictionary *string `json:"dictionary,omitempty"`
}

// Words defines model for Words.
type Words = []Word

// WordsResponse defines model for WordsResponse.
type WordsResponse = []Word

// RemoveWordJSONBody defines parameters for RemoveWord.
type RemoveWordJSONBody struct {
	// Dictionary Dictionary name (e.g., "russian")
	Dictionary string `json:"dictionary"`
}

// AddWordJSONRequestBody defines body for AddWord for application/json ContentType.
type AddWordJSONRequestBody = Words

// RemoveWordJSONRequestBody defines body for RemoveWord for application/json ContentType.
type RemoveWordJSONRequestBody RemoveWordJSONBody

// UpdateWordJSONRequestBody defines body for UpdateWord for application/json ContentType.
type UpdateWordJSONRequestBody = Word

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Load dictionary from TXT file
	// (POST /dictionaries/add/{name})
	LoadDictionary(c *fiber.Ctx, name string) error
	// Add new words
	// (POST /words)
	AddWord(c *fiber.Ctx) error
	// Delete a word
	// (DELETE /words/{data})
	RemoveWord(c *fiber.Ctx, data string) error
	// Update a word
	// (PUT /words/{data})
	UpdateWord(c *fiber.Ctx, data string) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// LoadDictionary operation middleware
func (siw *ServerInterfaceWrapper) LoadDictionary(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameter("simple", false, "name", c.Params("name"), &name)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter name: %w", err).Error())
	}

	return siw.Handler.LoadDictionary(c, name)
}

// AddWord operation middleware
func (siw *ServerInterfaceWrapper) AddWord(c *fiber.Ctx) error {

	return siw.Handler.AddWord(c)
}

// RemoveWord operation middleware
func (siw *ServerInterfaceWrapper) RemoveWord(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "data" -------------
	var data string

	err = runtime.BindStyledParameter("simple", false, "data", c.Params("data"), &data)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter data: %w", err).Error())
	}

	return siw.Handler.RemoveWord(c, data)
}

// UpdateWord operation middleware
func (siw *ServerInterfaceWrapper) UpdateWord(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "data" -------------
	var data string

	err = runtime.BindStyledParameter("simple", false, "data", c.Params("data"), &data)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter data: %w", err).Error())
	}

	return siw.Handler.UpdateWord(c, data)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(m)
	}

	router.Post(options.BaseURL+"/dictionaries/add/:name", wrapper.LoadDictionary)

	router.Post(options.BaseURL+"/words", wrapper.AddWord)

	router.Delete(options.BaseURL+"/words/:data", wrapper.RemoveWord)

	router.Put(options.BaseURL+"/words/:data", wrapper.UpdateWord)

}
